# include <stdio.h>
# include <iostream>
# include <string.h>

using namespace std;

// taller de repaso con arreglos

// parametrizacion
void MENU (void);
void LLENAR (short[], short[], short &, short &);
void UNION (short[], short[], short[], short, short);
void MOSTRAR (short[], short, short);
void LEER (short [], short, short);
void POSICION (short [], short [], short, short);
void BUSCAR (short [], short, short);
void BUSCAR_B (short [], short, short);
void ORDENAR_B (short [], short, short);
void ORDENAR_BM (short [], short, short);
void ORDENAR_S (short [], short, short);
void ORDENAR_BA (short [], short, short);
void INSERTAR_O (short [], short, short, short &);

// programa principal
int main ()
{
    MENU ();  
}

// funcion para menu
void MENU (void)
{
    // variables
    short Opcion, A[100], B[100], C[100], Posiciones[100], N, M, Tamaño;

    do
    {
        cout << "Menu de opciones" << endl;
        cout << "Por favor ingrese la opcion que desea: " << endl;

        cout << "1 - Llenar vector C, a partir de los A y B" << endl;
        cout << "2 - Mostrar la posicion del numero mayor" << endl;
        cout << "3 - Busqueda (secuencial)" << endl;
        cout << "4 - Busqueda (binaria)" << endl;
        cout << "5 - Ordenar (burbuja)" << endl;
        cout << "6 - Ordenar (burbuja mejorado)" << endl;
        cout << "7 - Ordenar (seleccion)" << endl;
        cout << "8 - Ordenar (baraja)" << endl;
        cout << "9 - Insertar (vector ordenado) ";
        
        cin >> Opcion;

        switch (Opcion)
        {
            case 1:
                LLENAR (A, B, N, M);
                UNION (A, B, C, N, M);
                MOSTRAR (C, N, M);
            break;

            case 2:
                POSICION (C, Posiciones, N, M);
            break;

            case 3:
                BUSCAR (C, N, M);
            break;

            case 4:
                BUSCAR_B (C, N, M);
            break;

            case 5:
                ORDENAR_B (C, N, M);
            break;

            case 6:
                ORDENAR_BM (C, N, M);
            break;

            case 7:
                ORDENAR_S (C, N, M);
            break;

            case 8:
                ORDENAR_BA (C, N, M);
            break;

            case 9:
                INSERTAR_O (C, N, M, Tamaño);
            break;

            default:
                exit (0);
            break;
        }
    }
    while (Opcion);
}

// procedimiento para llenar el vector A y B
void LLENAR (short A[], short B[], short &N, short &M)
{
    // variables
    short Indice_F;

    cout << "Ingrese la cantidad de elementos del vector A ";
    cin >> N;

    for (Indice_F = 1; Indice_F <= N; Indice_F ++)
    {
        cout << "Ingrese el elemento " << Indice_F << " ";
        cin >> A [Indice_F]; 
    }

    cout << "Ingrese la cantidad de elementos del vector B ";
    cin >> M;

    for (Indice_F = 1; Indice_F <= M; Indice_F ++)
    {
        cout << "Ingrese el elemento " << Indice_F << " ";
        cin >> B [Indice_F]; 
    }
}

// procedimiento para crear el vector C
void UNION (short A[], short B[], short C[], short N, short M)
{
    // variables
    short Indice_F, Indice_B;

    Indice_B = 1;

    for (Indice_F = 1; Indice_F <= N; Indice_F ++)
    {
        C[Indice_F] = A[Indice_F];
    }

    for (Indice_F = N+1; Indice_F <= N+M; Indice_F ++)
    {
        C[Indice_F] = B[Indice_B];
        Indice_B ++;
    }
}

// procedimiento para mostar
void MOSTRAR (short C[], short N, short M)
{
    // variables
    short Indice_F;

    for (Indice_F = 1; Indice_F <= N+M; Indice_F ++)
    {
        cout << C [Indice_F] << endl;
    }
}

// procedimiento para leer
void LEER (short C[], short N, short M)
{
    // variables
    short Indice_F;

    for (Indice_F = 1; Indice_F <= N+M; Indice_F ++)
    {
        cin >> C [Indice_F];
    }
}

// procedimiento para encontrar la posicion del numero mayor
void POSICION (short C[], short Posiciones[], short N, short M)
{
    // variables
    short Indice_F, Mayor, j, Posicion[100];
    
    Mayor = 0;
    j = 1;

    for (Indice_F = 1; Indice_F <= N+M; Indice_F ++)
    {
        if (C [Indice_F] > Mayor)
        {
            Mayor = C[Indice_F];
        }
    }

    for (Indice_F = 1; Indice_F <= N+M; Indice_F ++)
    {
        if (C [Indice_F] == Mayor)
        {
            Posiciones[j] = Indice_F;
            j ++;
        }
    }
    
    cout << "El numero mayor esta en las posiciones: " << endl;
    for (Indice_F = 1; Indice_F <= j-1; Indice_F ++)
    {
        cout << Posiciones[Indice_F] << endl;
    }
}

// procedimiento para buscar
void BUSCAR (short C[], short N, short M)
{
    // variables
    short i, Vr_Buscar;

    i = 1;

    cout << "Ingrese el elemento que desea buscar: ";
    cin >> Vr_Buscar;

    while (i <= N+M && Vr_Buscar != C [i])
    {
        i = i + 1;
    }

    if (i <= N+M)
    {
        cout << "El elemento buscado se encuentra en la posicion: " << i << endl;
    }
    else
    {
        cout << "El elemento buscado no se encuentra en el vector" << endl;
    }
}

// funcion para busqueda binaria
void BUSCAR_B (short C[], short N, short M)
{
    // variables
    short Limite1, Limite2, Mitad, Vr_Buscar;
    bool Vr_encontrado;

    cout << "Ingrese el elemento que desea buscar: ";
    cin >> Vr_Buscar;

    if (N+M %2 == 0)
    {
        Limite1 = 1;
    }
    if (N+M %2 != 0)
    {
        Limite1 = 0;
    }
    
    Limite2 = N+M;
    Vr_encontrado = 0;

    while ( (Limite1 <= Limite2) && (Vr_encontrado == 0) )
    {
        Mitad = ( (Limite1 + Limite2) / 2);

        if (C [Mitad] == Vr_Buscar)
        {
            Vr_encontrado = 1;
        }
        else
        {
            if (Vr_Buscar < C [Mitad])
            {
                Limite2 = Mitad - 1;
            }
            else
            {
                Limite1 = Mitad + 1;
            }
        }
    }
    if (Vr_Buscar == C [Mitad])
    {
        cout << "El elemento buscado se encuentra en la posicion: " << (Mitad) << endl; 
    }
    else
    {
        cout << "El elemento buscado no se encuentra en el vector" << endl;
    }
}

// procedimiento para ordenar ascendentemente (burbuja)
void ORDENAR_B (short C[], short N, short M)
{
    // variables
    short i, j, Aux;

    // compara la posicion 1 con el resto y las ordena en el 2 for, luego pasa a la posicion 2 y hace el mismo proceso... y asi con el resto
    for (i = 1; i <= N+M; i ++)
    {
        // compara el contenido de una posicion con el contenido de la siguiente. Si es mayor: la intercambia. Si es menor: lo deja igual. Es -1 porque la ultima posicion no tiene siguiente
        for (j = 1; j <= N+M-1; j ++)
        {
            if (C [j] > C [j+1])  
            {
                Aux = C [j];
                C [j] = C [j+1];
                C [j+1] = Aux;
            }
        }
    }

    for (i = 1; i <= N+M; i ++)
    {
        cout << C[i] << endl;
    }
}

// procedimiento para ordenar descendentemente (burbuja mejorado)
void ORDENAR_BM (short C[], short N, short M)
{
    // variables
    short Aux, paso, j, bandera, i;
    
    bandera = 1;

    for (paso = 0; paso <= N+M-1 && bandera == 1; paso ++)
    /* si en el paso anterior no hubo cambios se detiene ciclo */
    {
        bandera=0;
        for (j = 1;j <= N+M-paso-1; j++)
        /* las comparaciones van dismuyendo
        a medida que se efectuan los pasos */
        {
            if (C [j] < C [j+1])
            {
                bandera=1; /* indica si se han realizados cambios o no */
                Aux = C [j];
                C [j]= C [j+1];
                C [j+1]= Aux;
            }
        }
    }

    for (i = 1; i <= N+M; i ++)
    {
        cout << C[i] << endl;
    }
}

// procedimiento para ordenar ascendentemente (seleccion)
void ORDENAR_S (short C[], short N, short M)
{
    // encuentra el menor de todos los elementos del vector e intercambia con el que está en la primera posición. Luego el segundo mas pequeño, y así sucesivamente hasta ordenarlo todo

    // variables
    short Actual, Menor, j, Aux, i;
 
    for (Actual = 1; Actual <= N+M - 1; Actual ++)
    {
        Menor = Actual;

        for (j = Actual + 1; j <= N+M; j++)
        {
            if (C [j] < C [Menor])
            {
                Menor = j;
                Aux = C [Actual];
                C [Actual] = C [Menor];
                C [Menor] = Aux;
            }
        }
    }

    for (i = 1; i <= N+M; i ++)
    {
        cout << C[i] << endl;
    }
}

// procedimiento para ordenar ascendentemente (baraja)
void ORDENAR_BA (short C[], short N, short M)
{
    // insertar un elemento del arreglo en la parte izquierda del mismo, que ya se encuentra ordenada. Este proceso se repite desde el segundo hasta el n-esimo elemento. 

    // variables
    short Aux, j, i;

    for (i = 1; i <= N+M; i++)
    {
        Aux = C [i];
        j = i-1;

        while (j >= 1 && C [j] > Aux)
        {
            C [j+1] = C [j];
            j--;
        }
        C [j+1] = Aux;
    }

    for (i = 1; i <= N+M; i ++)
    {
        cout << C[i] << endl;
    }
}

// procedimiento para insertar (vector ordenado)
void INSERTAR_O (short C[], short N, short M, short &Tamaño)
{
    // variables
    short i, Vr_Insertar, j, Posic_Max;

    cout << "Ingrese el valor a insertar: ";
    cin >> Vr_Insertar;

    Tamaño = N+M;

    i = 0;

    while ((C[i] < Tamaño) && (C[i] <= Vr_Insertar))
    {
        i ++;
    }
    Posic_Max = i;

    for (i = Tamaño; i > Posic_Max; i--)
    {
        C[i] = C[i-1];
    }
    C[Posic_Max] = Vr_Insertar;
    Tamaño = Tamaño + 1;

    for (i = 1; i < Tamaño+1; i ++)
    {
        cout << C[i] << endl;
    }
}

